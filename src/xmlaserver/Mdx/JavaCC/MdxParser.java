/* Generated By:JavaCC: Do not edit this line. MdxParser.java */
package xmlaserver.Mdx.JavaCC;

import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import xmlaserver.Mdx.Language.MdxAxisDefinition;
import xmlaserver.Mdx.Language.MdxExpression;
import xmlaserver.Mdx.Language.MdxFunction;
import xmlaserver.Mdx.Language.MdxFunctionType;
import xmlaserver.Mdx.Language.MdxId;
import xmlaserver.Mdx.Language.MdxIdType;
import xmlaserver.Mdx.Language.MdxSelectDefinition;


public class MdxParser implements MdxParserConstants {
        public static MdxSelectDefinition parse(String inString) throws ParseException, TokenMgrError {
                Reader reader = new StringReader(inString);
                MdxParser parser = new MdxParser(reader);
                return parser.Start();
        }

// ----------------------------------------------------------------------------
// Entry points
  final public MdxSelectDefinition Start() throws ParseException {
    MdxSelectDefinition selectDefinition;
    selectDefinition = query();
    jj_consume_token(0);
            {if (true) return selectDefinition;}
    throw new Error("Missing return statement in function");
  }

  final public MdxSelectDefinition query() throws ParseException {
    MdxId cube;
    MdxAxisDefinition a;
    MdxSelectDefinition subquery;
    MdxSelectDefinition selectDefinition = new MdxSelectDefinition();
    MdxExpression w;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NON:
    case CROSSJOIN:
    case DRILLDOWNLEVEL:
    case DRILLDOWNMEMBER:
    case HIERARCHIZE:
    case LBRACE:
    case LPAREN:
    case START_QUOTED_ID:
    case ID:
      a = axisSpecification();
                                      selectDefinition.addAxis(a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        a = axisSpecification();
                                                selectDefinition.addAxis(a);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(FROM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_QUOTED_ID:
    case ID:
      cube = compoundId();
                                      selectDefinition.setCube(cube);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      subquery = query();
      jj_consume_token(RPAREN);
                                                             selectDefinition.setSubquery(subquery);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      w = mdxSet();
                       selectDefinition.setWhere(w);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CELL:
    case PROPERTIES:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CELL:
        jj_consume_token(CELL);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(PROPERTIES);
      jj_consume_token(CELL_PROPERTY);
                          selectDefinition.addCellProperty(token.image);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        jj_consume_token(CELL_PROPERTY);
                              selectDefinition.addCellProperty(token.image);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                {if (true) return selectDefinition;}
    throw new Error("Missing return statement in function");
  }

  final public String identifier() throws ParseException {
    StringBuilder builder = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
           {if (true) return token.image;}
      break;
    case START_QUOTED_ID:
      jj_consume_token(START_QUOTED_ID);
      quotedIdChar(builder);
      jj_consume_token(END_QUOTED_ID);
                                                                    {if (true) return builder.toString();}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void quotedIdChar(StringBuilder builder) throws ParseException {
    label_2:
    while (true) {
      jj_consume_token(QUOTED_ID_CHAR);
                           builder.append(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED_ID_CHAR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
    }
  }

  final public MdxId compoundId() throws ParseException {
    String s;
    List<String> list = new ArrayList<String>();
    s = identifier();
                       list.add(s);
    label_3:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(DOT);
      s = identifier();
                                 list.add(s);
    }
        //if (list.size() > 3)
                //	throw new ParseException("Compound ID " + list + " is too long");
        {if (true) return new MdxId(list, MdxIdType.UNKNOWN);}
    throw new Error("Missing return statement in function");
  }

// <axisSpecification> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
  final public MdxAxisDefinition axisSpecification() throws ParseException {
    MdxExpression e;
    MdxAxisDefinition axisDefinition = new MdxAxisDefinition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NON:
      jj_consume_token(NON);
      jj_consume_token(EMPTY);
                        axisDefinition.setNonEmpty(true);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    e = mdxSet();
                   axisDefinition.setExpression(e);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIMENSION:
    case PROPERTIES:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIMENSION:
        jj_consume_token(DIMENSION);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(PROPERTIES);
      jj_consume_token(DIMENTION_PROPERTY);
                               axisDefinition.addProperty(token.image);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        jj_consume_token(DIMENTION_PROPERTY);
                                   axisDefinition.addProperty(token.image);
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(ON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMNS:
      jj_consume_token(COLUMNS);
                    axisDefinition.setOn(token.image);
      break;
    case ROWS:
      jj_consume_token(ROWS);
                 axisDefinition.setOn(token.image);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return axisDefinition;}
    throw new Error("Missing return statement in function");
  }

  final public MdxExpression mdxSet() throws ParseException {
    MdxExpression e;
    List<MdxExpression> attributes = new ArrayList<MdxExpression>();
    if (jj_2_2(2147483647)) {
      e = compoundId();
                         attributes.add(e);
      jj_consume_token(DOT);
      jj_consume_token(MEMBERS);
                                                                  {if (true) return new MdxFunction(MdxFunctionType.MEMBERS, attributes);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_QUOTED_ID:
      case ID:
        e = compoundId();
                         {if (true) return e;}
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        e = mdxSet();
                                attributes.add(e);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          e = mdxSet();
                                                                              attributes.add(e);
        }
        jj_consume_token(RBRACE);
                                                                                                                   {if (true) return new MdxFunction(MdxFunctionType.SET, attributes);}
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        e = mdxSet();
                                attributes.add(e);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          e = mdxSet();
                                                                              attributes.add(e);
        }
        jj_consume_token(RPAREN);
                                                                                                                   {if (true) return new MdxFunction(MdxFunctionType.TUPLE, attributes);}
        break;
      case CROSSJOIN:
      case DRILLDOWNLEVEL:
      case DRILLDOWNMEMBER:
      case HIERARCHIZE:
        e = mdxSetValueExpression();
                                    {if (true) return e;}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public MdxExpression mdxSetValueExpression() throws ParseException {
    MdxExpression e;
    List<MdxExpression> attributes = new ArrayList<MdxExpression>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CROSSJOIN:
      jj_consume_token(CROSSJOIN);
      jj_consume_token(LPAREN);
      e = mdxSet();
                                          attributes.add(e);
      jj_consume_token(COMMA);
      e = mdxSet();
                                                                                      attributes.add(e);
      jj_consume_token(RPAREN);
                                                                                                                        {if (true) return new MdxFunction(MdxFunctionType.CROSSJOIN, attributes);}
      break;
    case DRILLDOWNLEVEL:
      jj_consume_token(DRILLDOWNLEVEL);
      jj_consume_token(LPAREN);
      e = mdxSet();
                                                 attributes.add(e);
      jj_consume_token(RPAREN);
                                                                                   {if (true) return new MdxFunction(MdxFunctionType.DRILLDOWNLEVEL, attributes);}
      break;
    case DRILLDOWNMEMBER:
      jj_consume_token(DRILLDOWNMEMBER);
      jj_consume_token(LPAREN);
      e = mdxSet();
                                                  attributes.add(e);
      jj_consume_token(COMMA);
      e = mdxSet();
                                                                                              attributes.add(e);
      jj_consume_token(RPAREN);
                                                                                                                                {if (true) return new MdxFunction(MdxFunctionType.DRILLDOWNMEMBER, attributes);}
      break;
    case HIERARCHIZE:
      jj_consume_token(HIERARCHIZE);
      jj_consume_token(LPAREN);
      e = mdxSet();
                                              attributes.add(e);
      jj_consume_token(RPAREN);
                                                                                {if (true) return new MdxFunction(MdxFunctionType.HIERARCHIZE, attributes);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(QUOTED_ID_CHAR)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(MEMBERS)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    if (jj_3R_13()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(START_QUOTED_ID)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(END_QUOTED_ID)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_7()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public MdxParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x800000,0x0,0x0,0x40,0x0,0x40000040,0x0,0x0,0x800000,0x200,0x0,0x40000200,0x100,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000000,0x40001e00,0x0,0x40,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x1,0x1000000,0x1000000,0x40001e00,0x1e00,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x901,0x901,0x0,0x0,0x0,0x0,0x900,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x901,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MdxParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MdxParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MdxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MdxParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MdxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MdxParser(MdxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MdxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[79];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
